

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Feb 17 13:38:30 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  0008                     	;# 
   215  0009                     	;# 
   216  000A                     	;# 
   217  000B                     	;# 
   218  000C                     	;# 
   219  000D                     	;# 
   220  000E                     	;# 
   221  000E                     	;# 
   222  000F                     	;# 
   223  0010                     	;# 
   224  0011                     	;# 
   225  0012                     	;# 
   226  0013                     	;# 
   227  0014                     	;# 
   228  0015                     	;# 
   229  0015                     	;# 
   230  0016                     	;# 
   231  0017                     	;# 
   232  0018                     	;# 
   233  0019                     	;# 
   234  001A                     	;# 
   235  001B                     	;# 
   236  001B                     	;# 
   237  001C                     	;# 
   238  001D                     	;# 
   239  001E                     	;# 
   240  001F                     	;# 
   241  0081                     	;# 
   242  0085                     	;# 
   243  0086                     	;# 
   244  0087                     	;# 
   245  0088                     	;# 
   246  0089                     	;# 
   247  008C                     	;# 
   248  008D                     	;# 
   249  008E                     	;# 
   250  008F                     	;# 
   251  0090                     	;# 
   252  0091                     	;# 
   253  0092                     	;# 
   254  0093                     	;# 
   255  0093                     	;# 
   256  0093                     	;# 
   257  0094                     	;# 
   258  0095                     	;# 
   259  0096                     	;# 
   260  0097                     	;# 
   261  0098                     	;# 
   262  0099                     	;# 
   263  009A                     	;# 
   264  009B                     	;# 
   265  009C                     	;# 
   266  009D                     	;# 
   267  009E                     	;# 
   268  009F                     	;# 
   269  0105                     	;# 
   270  0107                     	;# 
   271  0108                     	;# 
   272  0109                     	;# 
   273  010C                     	;# 
   274  010C                     	;# 
   275  010D                     	;# 
   276  010E                     	;# 
   277  010F                     	;# 
   278  0185                     	;# 
   279  0187                     	;# 
   280  0188                     	;# 
   281  0189                     	;# 
   282  018C                     	;# 
   283  018D                     	;# 
   284  0000                     	;# 
   285  0001                     	;# 
   286  0002                     	;# 
   287  0003                     	;# 
   288  0004                     	;# 
   289  0005                     	;# 
   290  0006                     	;# 
   291  0007                     	;# 
   292  0008                     	;# 
   293  0009                     	;# 
   294  000A                     	;# 
   295  000B                     	;# 
   296  000C                     	;# 
   297  000D                     	;# 
   298  000E                     	;# 
   299  000E                     	;# 
   300  000F                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0014                     	;# 
   306  0015                     	;# 
   307  0015                     	;# 
   308  0016                     	;# 
   309  0017                     	;# 
   310  0018                     	;# 
   311  0019                     	;# 
   312  001A                     	;# 
   313  001B                     	;# 
   314  001B                     	;# 
   315  001C                     	;# 
   316  001D                     	;# 
   317  001E                     	;# 
   318  001F                     	;# 
   319  0081                     	;# 
   320  0085                     	;# 
   321  0086                     	;# 
   322  0087                     	;# 
   323  0088                     	;# 
   324  0089                     	;# 
   325  008C                     	;# 
   326  008D                     	;# 
   327  008E                     	;# 
   328  008F                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0093                     	;# 
   333  0093                     	;# 
   334  0093                     	;# 
   335  0094                     	;# 
   336  0095                     	;# 
   337  0096                     	;# 
   338  0097                     	;# 
   339  0098                     	;# 
   340  0099                     	;# 
   341  009A                     	;# 
   342  009B                     	;# 
   343  009C                     	;# 
   344  009D                     	;# 
   345  009E                     	;# 
   346  009F                     	;# 
   347  0105                     	;# 
   348  0107                     	;# 
   349  0108                     	;# 
   350  0109                     	;# 
   351  010C                     	;# 
   352  010C                     	;# 
   353  010D                     	;# 
   354  010E                     	;# 
   355  010F                     	;# 
   356  0185                     	;# 
   357  0187                     	;# 
   358  0188                     	;# 
   359  0189                     	;# 
   360  018C                     	;# 
   361  018D                     	;# 
   362  0013                     _SSPBUF	set	19
   363  0014                     _SSPCON	set	20
   364  0014                     _SSPCONbits	set	20
   365  0009                     _PORTE	set	9
   366  0008                     _PORTD	set	8
   367  0006                     _PORTB	set	6
   368  0009                     _PORTEbits	set	9
   369  004B                     _RE3	set	75
   370  004A                     _RE2	set	74
   371  0094                     _SSPSTATbits	set	148
   372  008C                     _PIE1bits	set	140
   373  0085                     _TRISAbits	set	133
   374  0087                     _TRISCbits	set	135
   375  008F                     _OSCCONbits	set	143
   376  0089                     _TRISE	set	137
   377  0088                     _TRISD	set	136
   378  0086                     _TRISB	set	134
   379  0085                     _TRISA	set	133
   380  0189                     _ANSELH	set	393
   381  0188                     _ANSEL	set	392
   382                           
   383                           	psect	cinit
   384  07FB                     start_initialization:	
   385                           ; #config settings
   386                           
   387  07FB                     __initialization:
   388                           
   389                           ; Clear objects allocated to COMMON
   390  07FB  01F2               	clrf	__pbssCOMMON& (0+127)
   391  07FC                     end_of_initialization:	
   392                           ;End of C runtime variable initialization code
   393                           
   394  07FC                     __end_of__initialization:
   395  07FC  0183               	clrf	3
   396  07FD  120A  118A  2FC8   	ljmp	_main	;jump to C main() function
   397                           
   398                           	psect	bssCOMMON
   399  0072                     __pbssCOMMON:
   400  0072                     _read:
   401  0072                     	ds	1
   402                           
   403                           	psect	cstackCOMMON
   404  0070                     __pcstackCOMMON:
   405  0070                     ?_setup:
   406  0070                     ?_ReadMSSP:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ??_ReadMSSP:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_WriteMSSP:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ??_WriteMSSP:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_initOsc:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ??_initOsc:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_InitMSSP:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ??_InitMSSP:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     initOsc@Valor:	
   434                           ; 1 bytes @ 0x0
   435                           
   436  0070                     InitMSSP@Modo:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     WriteMSSP@Data:	
   440                           ; 1 bytes @ 0x0
   441                           
   442                           
   443                           ; 1 bytes @ 0x0
   444  0070                     	ds	1
   445  0071                     ??_setup:
   446  0071                     ??_main:	
   447                           ; 1 bytes @ 0x1
   448                           
   449                           
   450                           ; 1 bytes @ 0x1
   451  0071                     	ds	1
   452                           
   453                           	psect	maintext
   454  07C8                     __pmaintext:	
   455 ;;
   456 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   457 ;;
   458 ;; *************** function _main *****************
   459 ;; Defined at:
   460 ;;		line 60 in file "ESCLAVO2.c"
   461 ;; Parameters:    Size  Location     Type
   462 ;;		None
   463 ;; Auto vars:     Size  Location     Type
   464 ;;		None
   465 ;; Return value:  Size  Location     Type
   466 ;;                  1    wreg      void 
   467 ;; Registers used:
   468 ;;		wreg, status,2, status,0, pclath, cstack
   469 ;; Tracked objects:
   470 ;;		On entry : B00/0
   471 ;;		On exit  : 0/0
   472 ;;		Unchanged: 0/0
   473 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   474 ;;      Params:         0       0       0       0       0
   475 ;;      Locals:         0       0       0       0       0
   476 ;;      Temps:          1       0       0       0       0
   477 ;;      Totals:         1       0       0       0       0
   478 ;;Total ram usage:        1 bytes
   479 ;; Hardware stack levels required when called: 2
   480 ;; This function calls:
   481 ;;		_ReadMSSP
   482 ;;		_WriteMSSP
   483 ;;		_setup
   484 ;; This function is called by:
   485 ;;		Startup code after reset
   486 ;; This function uses a non-reentrant model
   487 ;;
   488                           
   489                           
   490                           ;psect for function _main
   491  07C8                     _main:
   492  07C8                     l747:	
   493                           ;incstack = 0
   494                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   495                           
   496                           
   497                           ;ESCLAVO2.c: 61:     setup();
   498  07C8  120A  118A  274C  120A  118A  	fcall	_setup
   499  07CD                     l749:
   500                           
   501                           ;ESCLAVO2.c: 62:     read = 0;
   502  07CD  01F2               	clrf	_read
   503  07CE                     l751:
   504                           
   505                           ;ESCLAVO2.c: 68:         if(PORTEbits.RE2){
   506  07CE  1283               	bcf	3,5	;RP0=0, select bank0
   507  07CF  1303               	bcf	3,6	;RP1=0, select bank0
   508  07D0  1D09               	btfss	9,2	;volatile
   509  07D1  2FD3               	goto	u91
   510  07D2  2FD4               	goto	u90
   511  07D3                     u91:
   512  07D3  2FDB               	goto	l42
   513  07D4                     u90:
   514  07D4                     l43:
   515  07D4  1909               	btfsc	9,2	;volatile
   516  07D5  2FD7               	goto	u101
   517  07D6  2FD8               	goto	u100
   518  07D7                     u101:
   519  07D7  2FD4               	goto	l43
   520  07D8                     u100:
   521  07D8                     l755:
   522                           
   523                           ;ESCLAVO2.c: 70:             PORTB--;
   524  07D8  3001               	movlw	1
   525  07D9  0286               	subwf	6,f	;volatile
   526                           
   527                           ;ESCLAVO2.c: 71:         }
   528  07DA  2FE7               	goto	l761
   529  07DB                     l42:	
   530                           ;ESCLAVO2.c: 72:         else if(PORTEbits.RE3){
   531                           
   532  07DB  1D89               	btfss	9,3	;volatile
   533  07DC  2FDE               	goto	u111
   534  07DD  2FDF               	goto	u110
   535  07DE                     u111:
   536  07DE  2FE7               	goto	l761
   537  07DF                     u110:
   538  07DF                     l48:
   539  07DF  1989               	btfsc	9,3	;volatile
   540  07E0  2FE2               	goto	u121
   541  07E1  2FE3               	goto	u120
   542  07E2                     u121:
   543  07E2  2FDF               	goto	l48
   544  07E3                     u120:
   545  07E3                     l759:
   546                           
   547                           ;ESCLAVO2.c: 74:             PORTB++;
   548  07E3  3001               	movlw	1
   549  07E4  00F1               	movwf	??_main
   550  07E5  0871               	movf	??_main,w
   551  07E6  0786               	addwf	6,f	;volatile
   552  07E7                     l761:
   553                           
   554                           ;ESCLAVO2.c: 80:         read = ReadMSSP();
   555  07E7  120A  118A  2742  120A  118A  	fcall	_ReadMSSP
   556  07EC  00F1               	movwf	??_main
   557  07ED  0871               	movf	??_main,w
   558  07EE  00F2               	movwf	_read
   559  07EF                     l763:
   560                           
   561                           ;ESCLAVO2.c: 81:         WriteMSSP(PORTB);
   562  07EF  1283               	bcf	3,5	;RP0=0, select bank0
   563  07F0  1303               	bcf	3,6	;RP1=0, select bank0
   564  07F1  0806               	movf	6,w	;volatile
   565  07F2  120A  118A  273C  120A  118A  	fcall	_WriteMSSP
   566  07F7  2FCE               	goto	l751
   567  07F8  120A  118A  2800   	ljmp	start
   568  07FB                     __end_of_main:
   569                           
   570                           	psect	text1
   571  074C                     __ptext1:	
   572 ;; *************** function _setup *****************
   573 ;; Defined at:
   574 ;;		line 88 in file "ESCLAVO2.c"
   575 ;; Parameters:    Size  Location     Type
   576 ;;		None
   577 ;; Auto vars:     Size  Location     Type
   578 ;;		None
   579 ;; Return value:  Size  Location     Type
   580 ;;                  1    wreg      void 
   581 ;; Registers used:
   582 ;;		wreg, status,2, status,0, pclath, cstack
   583 ;; Tracked objects:
   584 ;;		On entry : 0/0
   585 ;;		On exit  : 0/0
   586 ;;		Unchanged: 0/0
   587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   588 ;;      Params:         0       0       0       0       0
   589 ;;      Locals:         0       0       0       0       0
   590 ;;      Temps:          0       0       0       0       0
   591 ;;      Totals:         0       0       0       0       0
   592 ;;Total ram usage:        0 bytes
   593 ;; Hardware stack levels used: 1
   594 ;; Hardware stack levels required when called: 1
   595 ;; This function calls:
   596 ;;		_InitMSSP
   597 ;;		_initOsc
   598 ;; This function is called by:
   599 ;;		_main
   600 ;; This function uses a non-reentrant model
   601 ;;
   602                           
   603                           
   604                           ;psect for function _setup
   605  074C                     _setup:
   606  074C                     l725:	
   607                           ;incstack = 0
   608                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   609                           
   610                           
   611                           ;ESCLAVO2.c: 91:     ANSEL = 0;
   612  074C  1683               	bsf	3,5	;RP0=1, select bank3
   613  074D  1703               	bsf	3,6	;RP1=1, select bank3
   614  074E  0188               	clrf	8	;volatile
   615                           
   616                           ;ESCLAVO2.c: 92:     ANSELH = 0;
   617  074F  0189               	clrf	9	;volatile
   618                           
   619                           ;ESCLAVO2.c: 94:     TRISA = 0;
   620  0750  1683               	bsf	3,5	;RP0=1, select bank1
   621  0751  1303               	bcf	3,6	;RP1=0, select bank1
   622  0752  0185               	clrf	5	;volatile
   623                           
   624                           ;ESCLAVO2.c: 95:     TRISB = 0;
   625  0753  0186               	clrf	6	;volatile
   626                           
   627                           ;ESCLAVO2.c: 96:     TRISD = 0;
   628  0754  0188               	clrf	8	;volatile
   629  0755                     l727:
   630                           
   631                           ;ESCLAVO2.c: 97:     TRISE = 0b00110;
   632  0755  3006               	movlw	6
   633  0756  0089               	movwf	9	;volatile
   634  0757                     l729:
   635                           
   636                           ;ESCLAVO2.c: 99:     PORTD = 0;
   637  0757  1283               	bcf	3,5	;RP0=0, select bank0
   638  0758  1303               	bcf	3,6	;RP1=0, select bank0
   639  0759  0188               	clrf	8	;volatile
   640  075A                     l731:
   641                           
   642                           ;ESCLAVO2.c: 100:     PORTE = 0;
   643  075A  0189               	clrf	9	;volatile
   644  075B                     l733:
   645                           
   646                           ;ESCLAVO2.c: 101:     PORTB = 0;
   647  075B  0186               	clrf	6	;volatile
   648  075C                     l735:
   649                           
   650                           ;ESCLAVO2.c: 104:     initOsc(4);
   651  075C  3004               	movlw	4
   652  075D  120A  118A  2798  120A  118A  	fcall	_initOsc
   653  0762                     l737:
   654                           
   655                           ;ESCLAVO2.c: 107:     InitMSSP(SPI_SLAVE_SS_EN);
   656  0762  3004               	movlw	4
   657  0763  120A  118A  2769  120A  118A  	fcall	_InitMSSP
   658  0768                     l56:
   659  0768  0008               	return
   660  0769                     __end_of_setup:
   661                           
   662                           	psect	text2
   663  0798                     __ptext2:	
   664 ;; *************** function _initOsc *****************
   665 ;; Defined at:
   666 ;;		line 12 in file "Oscilador.c"
   667 ;; Parameters:    Size  Location     Type
   668 ;;  Valor           1    wreg     unsigned char 
   669 ;; Auto vars:     Size  Location     Type
   670 ;;  Valor           1    0[COMMON] unsigned char 
   671 ;; Return value:  Size  Location     Type
   672 ;;                  1    wreg      void 
   673 ;; Registers used:
   674 ;;		wreg, status,2, status,0
   675 ;; Tracked objects:
   676 ;;		On entry : 0/0
   677 ;;		On exit  : 0/0
   678 ;;		Unchanged: 0/0
   679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   680 ;;      Params:         0       0       0       0       0
   681 ;;      Locals:         1       0       0       0       0
   682 ;;      Temps:          0       0       0       0       0
   683 ;;      Totals:         1       0       0       0       0
   684 ;;Total ram usage:        1 bytes
   685 ;; Hardware stack levels used: 1
   686 ;; This function calls:
   687 ;;		Nothing
   688 ;; This function is called by:
   689 ;;		_setup
   690 ;; This function uses a non-reentrant model
   691 ;;
   692                           
   693                           
   694                           ;psect for function _initOsc
   695  0798                     _initOsc:
   696                           
   697                           ;incstack = 0
   698                           ; Regs used in _initOsc: [wreg+status,2+status,0]
   699                           ;initOsc@Valor stored from wreg
   700  0798  00F0               	movwf	initOsc@Valor
   701  0799                     l687:
   702                           
   703                           ;Oscilador.c: 14:     if(Valor == 8){
   704  0799  3008               	movlw	8
   705  079A  0670               	xorwf	initOsc@Valor,w
   706  079B  1D03               	btfss	3,2
   707  079C  2F9E               	goto	u11
   708  079D  2F9F               	goto	u10
   709  079E                     u11:
   710  079E  2FA4               	goto	l691
   711  079F                     u10:
   712  079F                     l689:
   713                           
   714                           ;Oscilador.c: 15:         OSCCONbits.IRCF0 = 1;
   715  079F  1683               	bsf	3,5	;RP0=1, select bank1
   716  07A0  1303               	bcf	3,6	;RP1=0, select bank1
   717  07A1  160F               	bsf	15,4	;volatile
   718                           
   719                           ;Oscilador.c: 16:         OSCCONbits.IRCF1 = 1;
   720  07A2  168F               	bsf	15,5	;volatile
   721                           
   722                           ;Oscilador.c: 17:         OSCCONbits.IRCF2 = 1;
   723  07A3  170F               	bsf	15,6	;volatile
   724  07A4                     l691:
   725                           
   726                           ;Oscilador.c: 19:     if(Valor == 4){
   727  07A4  3004               	movlw	4
   728  07A5  0670               	xorwf	initOsc@Valor,w
   729  07A6  1D03               	btfss	3,2
   730  07A7  2FA9               	goto	u21
   731  07A8  2FAA               	goto	u20
   732  07A9                     u21:
   733  07A9  2FAF               	goto	l695
   734  07AA                     u20:
   735  07AA                     l693:
   736                           
   737                           ;Oscilador.c: 20:         OSCCONbits.IRCF0 = 0;
   738  07AA  1683               	bsf	3,5	;RP0=1, select bank1
   739  07AB  1303               	bcf	3,6	;RP1=0, select bank1
   740  07AC  120F               	bcf	15,4	;volatile
   741                           
   742                           ;Oscilador.c: 21:         OSCCONbits.IRCF1 = 1;
   743  07AD  168F               	bsf	15,5	;volatile
   744                           
   745                           ;Oscilador.c: 22:         OSCCONbits.IRCF2 = 1;
   746  07AE  170F               	bsf	15,6	;volatile
   747  07AF                     l695:
   748                           
   749                           ;Oscilador.c: 24:     if(Valor == 2){
   750  07AF  3002               	movlw	2
   751  07B0  0670               	xorwf	initOsc@Valor,w
   752  07B1  1D03               	btfss	3,2
   753  07B2  2FB4               	goto	u31
   754  07B3  2FB5               	goto	u30
   755  07B4                     u31:
   756  07B4  2FBA               	goto	l699
   757  07B5                     u30:
   758  07B5                     l697:
   759                           
   760                           ;Oscilador.c: 25:         OSCCONbits.IRCF0 = 1;
   761  07B5  1683               	bsf	3,5	;RP0=1, select bank1
   762  07B6  1303               	bcf	3,6	;RP1=0, select bank1
   763  07B7  160F               	bsf	15,4	;volatile
   764                           
   765                           ;Oscilador.c: 26:         OSCCONbits.IRCF1 = 0;
   766  07B8  128F               	bcf	15,5	;volatile
   767                           
   768                           ;Oscilador.c: 27:         OSCCONbits.IRCF2 = 1;
   769  07B9  170F               	bsf	15,6	;volatile
   770  07BA                     l699:
   771                           
   772                           ;Oscilador.c: 29:     if(Valor == 1){
   773  07BA  0370               	decf	initOsc@Valor,w
   774  07BB  1D03               	btfss	3,2
   775  07BC  2FBE               	goto	u41
   776  07BD  2FBF               	goto	u40
   777  07BE                     u41:
   778  07BE  2FC4               	goto	l64
   779  07BF                     u40:
   780  07BF                     l701:
   781                           
   782                           ;Oscilador.c: 30:         OSCCONbits.IRCF0 = 0;
   783  07BF  1683               	bsf	3,5	;RP0=1, select bank1
   784  07C0  1303               	bcf	3,6	;RP1=0, select bank1
   785  07C1  120F               	bcf	15,4	;volatile
   786                           
   787                           ;Oscilador.c: 31:         OSCCONbits.IRCF1 = 0;
   788  07C2  128F               	bcf	15,5	;volatile
   789                           
   790                           ;Oscilador.c: 32:         OSCCONbits.IRCF2 = 1;
   791  07C3  170F               	bsf	15,6	;volatile
   792  07C4                     l64:	
   793                           ;Oscilador.c: 33:     }
   794                           
   795                           
   796                           ;Oscilador.c: 36:     OSCCONbits.SCS = 1;
   797  07C4  1683               	bsf	3,5	;RP0=1, select bank1
   798  07C5  1303               	bcf	3,6	;RP1=0, select bank1
   799  07C6  140F               	bsf	15,0	;volatile
   800  07C7                     l65:
   801  07C7  0008               	return
   802  07C8                     __end_of_initOsc:
   803                           
   804                           	psect	text3
   805  0769                     __ptext3:	
   806 ;; *************** function _InitMSSP *****************
   807 ;; Defined at:
   808 ;;		line 10 in file "SPI.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;  Modo            1    wreg     enum E1264
   811 ;; Auto vars:     Size  Location     Type
   812 ;;  Modo            1    0[COMMON] enum E1264
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2, status,0
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   822 ;;      Params:         0       0       0       0       0
   823 ;;      Locals:         1       0       0       0       0
   824 ;;      Temps:          0       0       0       0       0
   825 ;;      Totals:         1       0       0       0       0
   826 ;;Total ram usage:        1 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; This function calls:
   829 ;;		Nothing
   830 ;; This function is called by:
   831 ;;		_setup
   832 ;; This function uses a non-reentrant model
   833 ;;
   834                           
   835                           
   836                           ;psect for function _InitMSSP
   837  0769                     _InitMSSP:
   838                           
   839                           ;incstack = 0
   840                           ; Regs used in _InitMSSP: [wreg+status,2+status,0]
   841                           ;InitMSSP@Modo stored from wreg
   842  0769  00F0               	movwf	InitMSSP@Modo
   843  076A                     l703:
   844                           
   845                           ;SPI.c: 14:     SSPCONbits.SSPEN = 0;
   846  076A  1283               	bcf	3,5	;RP0=0, select bank0
   847  076B  1303               	bcf	3,6	;RP1=0, select bank0
   848  076C  1294               	bcf	20,5	;volatile
   849                           
   850                           ;SPI.c: 16:     SSPCONbits.SSPEN = 1;
   851  076D  1694               	bsf	20,5	;volatile
   852                           
   853                           ;SPI.c: 19:     TRISCbits.TRISC5 = 0;
   854  076E  1683               	bsf	3,5	;RP0=1, select bank1
   855  076F  1303               	bcf	3,6	;RP1=0, select bank1
   856  0770  1287               	bcf	7,5	;volatile
   857                           
   858                           ;SPI.c: 20:     TRISCbits.TRISC4 = 1;
   859  0771  1607               	bsf	7,4	;volatile
   860  0772                     l705:
   861                           
   862                           ;SPI.c: 21:     if (Modo < 0b00000110){
   863  0772  3006               	movlw	6
   864  0773  0270               	subwf	InitMSSP@Modo,w
   865  0774  1803               	skipnc
   866  0775  2F77               	goto	u51
   867  0776  2F78               	goto	u50
   868  0777                     u51:
   869  0777  2F81               	goto	l711
   870  0778                     u50:
   871  0778                     l707:
   872                           
   873                           ;SPI.c: 23:         if (Modo < 0b00000100){
   874  0778  3004               	movlw	4
   875  0779  0270               	subwf	InitMSSP@Modo,w
   876  077A  1803               	skipnc
   877  077B  2F7D               	goto	u61
   878  077C  2F7E               	goto	u60
   879  077D                     u61:
   880  077D  2F80               	goto	l83
   881  077E                     u60:
   882  077E                     l709:
   883                           
   884                           ;SPI.c: 24:             TRISCbits.TRISC3 = 0;
   885  077E  1187               	bcf	7,3	;volatile
   886                           
   887                           ;SPI.c: 25:         }
   888  077F  2F81               	goto	l711
   889  0780                     l83:	
   890                           ;SPI.c: 26:         else {
   891                           
   892                           
   893                           ;SPI.c: 27:             TRISCbits.TRISC3 = 1;
   894  0780  1587               	bsf	7,3	;volatile
   895  0781                     l711:
   896                           
   897                           ;SPI.c: 32:     if (Modo == 0b00000100){ TRISAbits.TRISA5 = 1;}
   898  0781  3004               	movlw	4
   899  0782  0670               	xorwf	InitMSSP@Modo,w
   900  0783  1D03               	btfss	3,2
   901  0784  2F86               	goto	u71
   902  0785  2F87               	goto	u70
   903  0786                     u71:
   904  0786  2F88               	goto	l715
   905  0787                     u70:
   906  0787                     l713:
   907  0787  1685               	bsf	5,5	;volatile
   908  0788                     l715:
   909                           
   910                           ;SPI.c: 36:     SSPCON = SSPCON | Modo;
   911  0788  1283               	bcf	3,5	;RP0=0, select bank0
   912  0789  1303               	bcf	3,6	;RP1=0, select bank0
   913  078A  0814               	movf	20,w	;volatile
   914  078B  0470               	iorwf	InitMSSP@Modo,w	;volatile
   915  078C  0094               	movwf	20	;volatile
   916  078D                     l717:
   917                           
   918                           ;SPI.c: 38:     PIE1bits.SSPIE = 0;
   919  078D  1683               	bsf	3,5	;RP0=1, select bank1
   920  078E  1303               	bcf	3,6	;RP1=0, select bank1
   921  078F  118C               	bcf	12,3	;volatile
   922  0790                     l719:
   923                           
   924                           ;SPI.c: 42:     SSPCONbits.CKP = 0;
   925  0790  1283               	bcf	3,5	;RP0=0, select bank0
   926  0791  1303               	bcf	3,6	;RP1=0, select bank0
   927  0792  1214               	bcf	20,4	;volatile
   928  0793                     l721:
   929                           
   930                           ;SPI.c: 45:     SSPSTATbits.CKE = 1;
   931  0793  1683               	bsf	3,5	;RP0=1, select bank1
   932  0794  1303               	bcf	3,6	;RP1=0, select bank1
   933  0795  1714               	bsf	20,6	;volatile
   934  0796                     l723:
   935                           
   936                           ;SPI.c: 47:     SSPSTATbits.SMP = 0;
   937  0796  1394               	bcf	20,7	;volatile
   938  0797                     l86:
   939  0797  0008               	return
   940  0798                     __end_of_InitMSSP:
   941                           
   942                           	psect	text4
   943  073C                     __ptext4:	
   944 ;; *************** function _WriteMSSP *****************
   945 ;; Defined at:
   946 ;;		line 51 in file "SPI.c"
   947 ;; Parameters:    Size  Location     Type
   948 ;;  Data            1    wreg     unsigned char 
   949 ;; Auto vars:     Size  Location     Type
   950 ;;  Data            1    0[COMMON] unsigned char 
   951 ;; Return value:  Size  Location     Type
   952 ;;                  1    wreg      void 
   953 ;; Registers used:
   954 ;;		wreg
   955 ;; Tracked objects:
   956 ;;		On entry : 0/0
   957 ;;		On exit  : 0/0
   958 ;;		Unchanged: 0/0
   959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   960 ;;      Params:         0       0       0       0       0
   961 ;;      Locals:         1       0       0       0       0
   962 ;;      Temps:          0       0       0       0       0
   963 ;;      Totals:         1       0       0       0       0
   964 ;;Total ram usage:        1 bytes
   965 ;; Hardware stack levels used: 1
   966 ;; This function calls:
   967 ;;		Nothing
   968 ;; This function is called by:
   969 ;;		_main
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _WriteMSSP
   975  073C                     _WriteMSSP:
   976                           
   977                           ;incstack = 0
   978                           ; Regs used in _WriteMSSP: [wreg]
   979                           ;WriteMSSP@Data stored from wreg
   980  073C  00F0               	movwf	WriteMSSP@Data
   981  073D                     l745:
   982                           
   983                           ;SPI.c: 55:     SSPBUF = Data;
   984  073D  0870               	movf	WriteMSSP@Data,w
   985  073E  1283               	bcf	3,5	;RP0=0, select bank0
   986  073F  1303               	bcf	3,6	;RP1=0, select bank0
   987  0740  0093               	movwf	19	;volatile
   988  0741                     l89:
   989  0741  0008               	return
   990  0742                     __end_of_WriteMSSP:
   991                           
   992                           	psect	text5
   993  0742                     __ptext5:	
   994 ;; *************** function _ReadMSSP *****************
   995 ;; Defined at:
   996 ;;		line 59 in file "SPI.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      unsigned char 
  1003 ;; Registers used:
  1004 ;;		wreg
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1010 ;;      Params:         0       0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0
  1013 ;;      Totals:         0       0       0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels used: 1
  1016 ;; This function calls:
  1017 ;;		Nothing
  1018 ;; This function is called by:
  1019 ;;		_main
  1020 ;; This function uses a non-reentrant model
  1021 ;;
  1022                           
  1023                           
  1024                           ;psect for function _ReadMSSP
  1025  0742                     _ReadMSSP:
  1026  0742                     l739:	
  1027                           ;incstack = 0
  1028                           ; Regs used in _ReadMSSP: [wreg]
  1029                           
  1030  0742                     l92:	
  1031                           ;SPI.c: 60:     while(SSPSTATbits.BF == 0){}
  1032                           
  1033  0742  1683               	bsf	3,5	;RP0=1, select bank1
  1034  0743  1303               	bcf	3,6	;RP1=0, select bank1
  1035  0744  1C14               	btfss	20,0	;volatile
  1036  0745  2F47               	goto	u81
  1037  0746  2F48               	goto	u80
  1038  0747                     u81:
  1039  0747  2F42               	goto	l92
  1040  0748                     u80:
  1041  0748                     l741:
  1042                           
  1043                           ;SPI.c: 61:     return(SSPBUF);
  1044  0748  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0749  1303               	bcf	3,6	;RP1=0, select bank0
  1046  074A  0813               	movf	19,w	;volatile
  1047  074B                     l95:
  1048  074B  0008               	return
  1049  074C                     __end_of_ReadMSSP:
  1050  007E                     btemp	set	126	;btemp
  1051  007E                     wtemp0	set	126
  1052                           
  1053                           	psect	config
  1054                           
  1055                           ;Config register CONFIG1 @ 0x2007
  1056                           ;	Oscillator Selection bits
  1057                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1058                           ;	Watchdog Timer Enable bit
  1059                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1060                           ;	Power-up Timer Enable bit
  1061                           ;	PWRTE = OFF, PWRT disabled
  1062                           ;	RE3/MCLR pin function select bit
  1063                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1064                           ;	Code Protection bit
  1065                           ;	CP = OFF, Program memory code protection is disabled
  1066                           ;	Data Code Protection bit
  1067                           ;	CPD = OFF, Data memory code protection is disabled
  1068                           ;	Brown Out Reset Selection bits
  1069                           ;	BOREN = OFF, BOR disabled
  1070                           ;	Internal External Switchover bit
  1071                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1072                           ;	Fail-Safe Clock Monitor Enabled bit
  1073                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1074                           ;	Low Voltage Programming Enable bit
  1075                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1076                           ;	In-Circuit Debugger Mode bit
  1077                           ;	DEBUG = 0x1, unprogrammed default
  1078  2007                     	org	8199
  1079  2007  20D4               	dw	8404
  1080                           
  1081                           ;Config register CONFIG2 @ 0x2008
  1082                           ;	Brown-out Reset Selection bit
  1083                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1084                           ;	Flash Program Memory Self Write Enable bits
  1085                           ;	WRT = OFF, Write protection off
  1086  2008                     	org	8200
  1087  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       3
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_WriteMSSP
    _setup->_InitMSSP
    _setup->_initOsc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     135
                                              1 COMMON     1     1      0
                           _ReadMSSP
                          _WriteMSSP
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     120
                           _InitMSSP
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMSSP                                             1     1      0      60
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _WriteMSSP                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ReadMSSP                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadMSSP
   _WriteMSSP
   _setup
     _InitMSSP
     _initOsc

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      2       3       1       21.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       3       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       3      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Feb 17 13:38:30 2022

            _SSPSTATbits 0094                       l42 07DB                       l43 07D4  
                     l64 07C4                       l56 0768                       l48 07DF  
                     l65 07C7                       l83 0780                       l92 0742  
                     l86 0797                       l95 074B                       l89 0741  
                     u10 079F                       u11 079E                       u20 07AA  
                     u21 07A9                       u30 07B5                       u31 07B4  
                     u40 07BF                       u41 07BE                       u50 0778  
                     u51 0777                       u60 077E                       u61 077D  
                     u70 0787                       u71 0786                       u80 0748  
                     u81 0747                       u90 07D4                       u91 07D3  
                    l701 07BF                      l711 0781                      l703 076A  
                    l721 0793                      l713 0787                      l705 0772  
                    l723 0796                      l715 0788                      l707 0778  
                    l731 075A                      l741 0748                      l717 078D  
                    l709 077E                      l733 075B                      l725 074C  
                    l719 0790                      l735 075C                      l727 0755  
                    l751 07CE                      l745 073D                      l737 0762  
                    l729 0757                      l761 07E7                      l739 0742  
                    l691 07A4                      l763 07EF                      l755 07D8  
                    l747 07C8                      l693 07AA                      l749 07CD  
                    l695 07AF                      l687 0799                      l759 07E3  
                    l697 07B5                      l689 079F                      l699 07BA  
                    u100 07D8                      _RE2 004A                      u101 07D7  
                    _RE3 004B                      u110 07DF                      u111 07DE  
                    u120 07E3                      u121 07E2                     _main 07C8  
                   _read 0072                     btemp 007E                     start 0000  
                  ?_main 0070                    _ANSEL 0188                    _PORTB 0006  
                  _PORTD 0008                    _PORTE 0009                    _TRISA 0085  
                  _TRISB 0086                    _TRISD 0088                    _TRISE 0089  
           InitMSSP@Modo 0070          __end_of_initOsc 07C8                    _setup 074C  
                  status 0003                    wtemp0 007E          __initialization 07FB  
           __end_of_main 07FB         __end_of_InitMSSP 0798         __end_of_ReadMSSP 074C  
                 ??_main 0071                   ?_setup 0070                   _ANSELH 0189  
                 _SSPCON 0014                   _SSPBUF 0013                ??_initOsc 0070  
__end_of__initialization 07FC       __size_of_WriteMSSP 0006           __pcstackCOMMON 0070  
          __end_of_setup 0769                  ??_setup 0071                ?_InitMSSP 0070  
              ?_ReadMSSP 0070               __pmaintext 07C8        __end_of_WriteMSSP 0742  
           initOsc@Valor 0070               ??_InitMSSP 0070               ??_ReadMSSP 0070  
                __ptext1 074C                  __ptext2 0798                  __ptext3 0769  
                __ptext4 073C                  __ptext5 0742                  _initOsc 0798  
   end_of_initialization 07FC                _PORTEbits 0009                _TRISAbits 0085  
              _TRISCbits 0087            WriteMSSP@Data 0070      start_initialization 07FB  
      __size_of_InitMSSP 002F        __size_of_ReadMSSP 000A              __pbssCOMMON 0072  
              ___latbits 0002                _WriteMSSP 073C                 ?_initOsc 0070  
             ?_WriteMSSP 0070           __size_of_setup 001D                 _PIE1bits 008C  
               _InitMSSP 0769                 _ReadMSSP 0742         __size_of_initOsc 0030  
            ??_WriteMSSP 0070            __size_of_main 0033               _OSCCONbits 008F  
             _SSPCONbits 0014  
