

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Fri Feb 18 11:05:21 2022

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	psect	text6,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  000E                     	;# 
   302  000F                     	;# 
   303  0010                     	;# 
   304  0011                     	;# 
   305  0012                     	;# 
   306  0013                     	;# 
   307  0014                     	;# 
   308  0015                     	;# 
   309  0015                     	;# 
   310  0016                     	;# 
   311  0017                     	;# 
   312  0018                     	;# 
   313  0019                     	;# 
   314  001A                     	;# 
   315  001B                     	;# 
   316  001B                     	;# 
   317  001C                     	;# 
   318  001D                     	;# 
   319  001E                     	;# 
   320  001F                     	;# 
   321  0081                     	;# 
   322  0085                     	;# 
   323  0086                     	;# 
   324  0087                     	;# 
   325  0088                     	;# 
   326  0089                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  008F                     	;# 
   331  0090                     	;# 
   332  0091                     	;# 
   333  0092                     	;# 
   334  0093                     	;# 
   335  0093                     	;# 
   336  0093                     	;# 
   337  0094                     	;# 
   338  0095                     	;# 
   339  0096                     	;# 
   340  0097                     	;# 
   341  0098                     	;# 
   342  0099                     	;# 
   343  009A                     	;# 
   344  009B                     	;# 
   345  009C                     	;# 
   346  009D                     	;# 
   347  009E                     	;# 
   348  009F                     	;# 
   349  0105                     	;# 
   350  0107                     	;# 
   351  0108                     	;# 
   352  0109                     	;# 
   353  010C                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  0185                     	;# 
   359  0187                     	;# 
   360  0188                     	;# 
   361  0189                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  0013                     _SSPBUF	set	19
   365  0014                     _SSPCONbits	set	20
   366  0014                     _SSPCON	set	20
   367  000C                     _PIR1bits	set	12
   368  000B                     _INTCONbits	set	11
   369  0005                     _PORTA	set	5
   370  0008                     _PORTD	set	8
   371  0009                     _PORTE	set	9
   372  0006                     _PORTB	set	6
   373  0008                     _PORTDbits	set	8
   374  0043                     _RD3	set	67
   375  0042                     _RD2	set	66
   376  0063                     _SSPIF	set	99
   377  0094                     _SSPSTATbits	set	148
   378  0085                     _TRISAbits	set	133
   379  0087                     _TRISCbits	set	135
   380  0094                     _SSPSTAT	set	148
   381  008F                     _OSCCONbits	set	143
   382  008C                     _PIE1bits	set	140
   383  0089                     _TRISE	set	137
   384  0088                     _TRISD	set	136
   385  0086                     _TRISB	set	134
   386  0085                     _TRISA	set	133
   387  0189                     _ANSELH	set	393
   388  0188                     _ANSEL	set	392
   389                           
   390                           	psect	cinit
   391  000F                     start_initialization:	
   392                           ; #config settings
   393                           
   394  000F                     __initialization:
   395                           
   396                           ; Clear objects allocated to COMMON
   397  000F  01F6               	clrf	__pbssCOMMON& (0+127)
   398  0010  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
   399  0011                     end_of_initialization:	
   400                           ;End of C runtime variable initialization code
   401                           
   402  0011                     __end_of__initialization:
   403  0011  0183               	clrf	3
   404  0012  120A  118A  2899   	ljmp	_main	;jump to C main() function
   405                           
   406                           	psect	bssCOMMON
   407  0076                     __pbssCOMMON:
   408  0076                     _PORT:
   409  0076                     	ds	1
   410  0077                     _read1:
   411  0077                     	ds	1
   412                           
   413                           	psect	cstackCOMMON
   414  0070                     __pcstackCOMMON:
   415  0070                     ?_ReadMSSP:
   416  0070                     ??_ReadMSSP:	
   417                           ; 1 bytes @ 0x0
   418                           
   419  0070                     ?_WriteMSSP:	
   420                           ; 1 bytes @ 0x0
   421                           
   422  0070                     ??_WriteMSSP:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_setup:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_initOsc:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?_InitMSSP:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     ?_isr:	
   435                           ; 1 bytes @ 0x0
   436                           
   437  0070                     ?_main:	
   438                           ; 1 bytes @ 0x0
   439                           
   440  0070                     WriteMSSP@Data:	
   441                           ; 1 bytes @ 0x0
   442                           
   443                           
   444                           ; 1 bytes @ 0x0
   445  0070                     	ds	1
   446  0071                     ??_isr:
   447                           
   448                           ; 1 bytes @ 0x1
   449  0071                     	ds	3
   450  0074                     ??_initOsc:
   451  0074                     ??_InitMSSP:	
   452                           ; 1 bytes @ 0x4
   453                           
   454  0074                     initOsc@Valor:	
   455                           ; 1 bytes @ 0x4
   456                           
   457  0074                     InitMSSP@Modo:	
   458                           ; 1 bytes @ 0x4
   459                           
   460                           
   461                           ; 1 bytes @ 0x4
   462  0074                     	ds	1
   463  0075                     ??_setup:
   464  0075                     ??_main:	
   465                           ; 1 bytes @ 0x5
   466                           
   467                           
   468                           ; 1 bytes @ 0x5
   469  0075                     	ds	1
   470                           
   471                           	psect	maintext
   472  0099                     __pmaintext:	
   473 ;;
   474 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   475 ;;
   476 ;; *************** function _main *****************
   477 ;; Defined at:
   478 ;;		line 68 in file "ESCLAVO2.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;		None
   483 ;; Return value:  Size  Location     Type
   484 ;;                  1    wreg      void 
   485 ;; Registers used:
   486 ;;		wreg, status,2, status,0, pclath, cstack
   487 ;; Tracked objects:
   488 ;;		On entry : B00/0
   489 ;;		On exit  : 0/0
   490 ;;		Unchanged: 0/0
   491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   492 ;;      Params:         0       0       0       0       0
   493 ;;      Locals:         0       0       0       0       0
   494 ;;      Temps:          1       0       0       0       0
   495 ;;      Totals:         1       0       0       0       0
   496 ;;Total ram usage:        1 bytes
   497 ;; Hardware stack levels required when called: 4
   498 ;; This function calls:
   499 ;;		_setup
   500 ;; This function is called by:
   501 ;;		Startup code after reset
   502 ;; This function uses a non-reentrant model
   503 ;;
   504                           
   505                           
   506                           ;psect for function _main
   507  0099                     _main:
   508  0099                     l790:	
   509                           ;incstack = 0
   510                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   511                           
   512                           
   513                           ;ESCLAVO2.c: 69:     setup();
   514  0099  120A  118A  2073  120A  118A  	fcall	_setup
   515  009E                     l792:
   516                           
   517                           ;ESCLAVO2.c: 70:     read1 = 0;
   518  009E  01F7               	clrf	_read1
   519  009F                     l794:
   520                           
   521                           ;ESCLAVO2.c: 76:         if(PORTDbits.RD2){
   522  009F  1283               	bcf	3,5	;RP0=0, select bank0
   523  00A0  1303               	bcf	3,6	;RP1=0, select bank0
   524  00A1  1D08               	btfss	8,2	;volatile
   525  00A2  28A4               	goto	u101
   526  00A3  28A5               	goto	u100
   527  00A4                     u101:
   528  00A4  28AB               	goto	l800
   529  00A5                     u100:
   530  00A5                     l61:
   531  00A5  1908               	btfsc	8,2	;volatile
   532  00A6  28A8               	goto	u111
   533  00A7  28A9               	goto	u110
   534  00A8                     u111:
   535  00A8  28A5               	goto	l61
   536  00A9                     u110:
   537  00A9                     l798:
   538                           
   539                           ;ESCLAVO2.c: 78:             PORT--;
   540  00A9  3001               	movlw	1
   541  00AA  02F6               	subwf	_PORT,f
   542  00AB                     l800:
   543                           
   544                           ;ESCLAVO2.c: 80:         if(PORTDbits.RD3){
   545  00AB  1D88               	btfss	8,3	;volatile
   546  00AC  28AE               	goto	u121
   547  00AD  28AF               	goto	u120
   548  00AE                     u121:
   549  00AE  28B7               	goto	l806
   550  00AF                     u120:
   551  00AF                     l65:
   552  00AF  1988               	btfsc	8,3	;volatile
   553  00B0  28B2               	goto	u131
   554  00B1  28B3               	goto	u130
   555  00B2                     u131:
   556  00B2  28AF               	goto	l65
   557  00B3                     u130:
   558  00B3                     l804:
   559                           
   560                           ;ESCLAVO2.c: 82:             PORT++;
   561  00B3  3001               	movlw	1
   562  00B4  00F5               	movwf	??_main
   563  00B5  0875               	movf	??_main,w
   564  00B6  07F6               	addwf	_PORT,f
   565  00B7                     l806:
   566                           
   567                           ;ESCLAVO2.c: 85:         PORTB = PORT;
   568  00B7  0876               	movf	_PORT,w
   569  00B8  0086               	movwf	6	;volatile
   570  00B9  289F               	goto	l794
   571  00BA  120A  118A  280C   	ljmp	start
   572  00BD                     __end_of_main:
   573                           
   574                           	psect	text1
   575  0073                     __ptext1:	
   576 ;; *************** function _setup *****************
   577 ;; Defined at:
   578 ;;		line 90 in file "ESCLAVO2.c"
   579 ;; Parameters:    Size  Location     Type
   580 ;;		None
   581 ;; Auto vars:     Size  Location     Type
   582 ;;		None
   583 ;; Return value:  Size  Location     Type
   584 ;;                  1    wreg      void 
   585 ;; Registers used:
   586 ;;		wreg, status,2, status,0, pclath, cstack
   587 ;; Tracked objects:
   588 ;;		On entry : 0/0
   589 ;;		On exit  : 0/0
   590 ;;		Unchanged: 0/0
   591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   592 ;;      Params:         0       0       0       0       0
   593 ;;      Locals:         0       0       0       0       0
   594 ;;      Temps:          0       0       0       0       0
   595 ;;      Totals:         0       0       0       0       0
   596 ;;Total ram usage:        0 bytes
   597 ;; Hardware stack levels used: 1
   598 ;; Hardware stack levels required when called: 3
   599 ;; This function calls:
   600 ;;		_InitMSSP
   601 ;;		_initOsc
   602 ;; This function is called by:
   603 ;;		_main
   604 ;; This function uses a non-reentrant model
   605 ;;
   606                           
   607                           
   608                           ;psect for function _setup
   609  0073                     _setup:
   610  0073                     l756:	
   611                           ;incstack = 0
   612                           ; Regs used in _setup: [wreg+status,2+status,0+pclath+cstack]
   613                           
   614                           
   615                           ;ESCLAVO2.c: 93:     ANSEL = 0;
   616  0073  1683               	bsf	3,5	;RP0=1, select bank3
   617  0074  1703               	bsf	3,6	;RP1=1, select bank3
   618  0075  0188               	clrf	8	;volatile
   619                           
   620                           ;ESCLAVO2.c: 94:     ANSELH = 0;
   621  0076  0189               	clrf	9	;volatile
   622                           
   623                           ;ESCLAVO2.c: 96:     TRISA = 0;
   624  0077  1683               	bsf	3,5	;RP0=1, select bank1
   625  0078  1303               	bcf	3,6	;RP1=0, select bank1
   626  0079  0185               	clrf	5	;volatile
   627                           
   628                           ;ESCLAVO2.c: 97:     TRISB = 0;
   629  007A  0186               	clrf	6	;volatile
   630  007B                     l758:
   631                           
   632                           ;ESCLAVO2.c: 98:     TRISD = 0b01100;
   633  007B  300C               	movlw	12
   634  007C  0088               	movwf	8	;volatile
   635  007D                     l760:
   636                           
   637                           ;ESCLAVO2.c: 99:     TRISE = 0;
   638  007D  0189               	clrf	9	;volatile
   639  007E                     l762:
   640                           
   641                           ;ESCLAVO2.c: 101:     PORTE = 0;
   642  007E  1283               	bcf	3,5	;RP0=0, select bank0
   643  007F  1303               	bcf	3,6	;RP1=0, select bank0
   644  0080  0189               	clrf	9	;volatile
   645  0081                     l764:
   646                           
   647                           ;ESCLAVO2.c: 102:     PORTD = 0;
   648  0081  0188               	clrf	8	;volatile
   649  0082                     l766:
   650                           
   651                           ;ESCLAVO2.c: 103:     PORTA = 0;
   652  0082  0185               	clrf	5	;volatile
   653  0083                     l768:
   654                           
   655                           ;ESCLAVO2.c: 104:     PORTB = 0;
   656  0083  0186               	clrf	6	;volatile
   657  0084                     l770:
   658                           
   659                           ;ESCLAVO2.c: 107:     initOsc(4);
   660  0084  3004               	movlw	4
   661  0085  120A  118A  2015  120A  118A  	fcall	_initOsc
   662  008A                     l772:
   663                           
   664                           ;ESCLAVO2.c: 110:     InitMSSP(SPI_SLAVE_SS_EN);
   665  008A  3004               	movlw	4
   666  008B  120A  118A  2045  120A  118A  	fcall	_InitMSSP
   667  0090                     l774:
   668                           
   669                           ;ESCLAVO2.c: 113:     INTCONbits.GIE = 1;
   670  0090  178B               	bsf	11,7	;volatile
   671  0091                     l776:
   672                           
   673                           ;ESCLAVO2.c: 114:     INTCONbits.PEIE = 1;
   674  0091  170B               	bsf	11,6	;volatile
   675  0092                     l778:
   676                           
   677                           ;ESCLAVO2.c: 115:     PIR1bits.SSPIF = 0;
   678  0092  1283               	bcf	3,5	;RP0=0, select bank0
   679  0093  1303               	bcf	3,6	;RP1=0, select bank0
   680  0094  118C               	bcf	12,3	;volatile
   681  0095                     l780:
   682                           
   683                           ;ESCLAVO2.c: 116:     PIE1bits.SSPIE = 1;
   684  0095  1683               	bsf	3,5	;RP0=1, select bank1
   685  0096  1303               	bcf	3,6	;RP1=0, select bank1
   686  0097  158C               	bsf	12,3	;volatile
   687  0098                     l73:
   688  0098  0008               	return
   689  0099                     __end_of_setup:
   690                           
   691                           	psect	text2
   692  0015                     __ptext2:	
   693 ;; *************** function _initOsc *****************
   694 ;; Defined at:
   695 ;;		line 12 in file "Oscilador.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;  Valor           1    wreg     unsigned char 
   698 ;; Auto vars:     Size  Location     Type
   699 ;;  Valor           1    4[COMMON] unsigned char 
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, status,2, status,0
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         1       0       0       0       0
   711 ;;      Temps:          0       0       0       0       0
   712 ;;      Totals:         1       0       0       0       0
   713 ;;Total ram usage:        1 bytes
   714 ;; Hardware stack levels used: 1
   715 ;; Hardware stack levels required when called: 2
   716 ;; This function calls:
   717 ;;		Nothing
   718 ;; This function is called by:
   719 ;;		_setup
   720 ;; This function uses a non-reentrant model
   721 ;;
   722                           
   723                           
   724                           ;psect for function _initOsc
   725  0015                     _initOsc:
   726                           
   727                           ;incstack = 0
   728                           ; Regs used in _initOsc: [wreg+status,2+status,0]
   729                           ;initOsc@Valor stored from wreg
   730  0015  00F4               	movwf	initOsc@Valor
   731  0016                     l704:
   732                           
   733                           ;Oscilador.c: 14:     if(Valor == 8){
   734  0016  3008               	movlw	8
   735  0017  0674               	xorwf	initOsc@Valor,w
   736  0018  1D03               	btfss	3,2
   737  0019  281B               	goto	u11
   738  001A  281C               	goto	u10
   739  001B                     u11:
   740  001B  2821               	goto	l708
   741  001C                     u10:
   742  001C                     l706:
   743                           
   744                           ;Oscilador.c: 15:         OSCCONbits.IRCF0 = 1;
   745  001C  1683               	bsf	3,5	;RP0=1, select bank1
   746  001D  1303               	bcf	3,6	;RP1=0, select bank1
   747  001E  160F               	bsf	15,4	;volatile
   748                           
   749                           ;Oscilador.c: 16:         OSCCONbits.IRCF1 = 1;
   750  001F  168F               	bsf	15,5	;volatile
   751                           
   752                           ;Oscilador.c: 17:         OSCCONbits.IRCF2 = 1;
   753  0020  170F               	bsf	15,6	;volatile
   754  0021                     l708:
   755                           
   756                           ;Oscilador.c: 19:     if(Valor == 4){
   757  0021  3004               	movlw	4
   758  0022  0674               	xorwf	initOsc@Valor,w
   759  0023  1D03               	btfss	3,2
   760  0024  2826               	goto	u21
   761  0025  2827               	goto	u20
   762  0026                     u21:
   763  0026  282C               	goto	l712
   764  0027                     u20:
   765  0027                     l710:
   766                           
   767                           ;Oscilador.c: 20:         OSCCONbits.IRCF0 = 0;
   768  0027  1683               	bsf	3,5	;RP0=1, select bank1
   769  0028  1303               	bcf	3,6	;RP1=0, select bank1
   770  0029  120F               	bcf	15,4	;volatile
   771                           
   772                           ;Oscilador.c: 21:         OSCCONbits.IRCF1 = 1;
   773  002A  168F               	bsf	15,5	;volatile
   774                           
   775                           ;Oscilador.c: 22:         OSCCONbits.IRCF2 = 1;
   776  002B  170F               	bsf	15,6	;volatile
   777  002C                     l712:
   778                           
   779                           ;Oscilador.c: 24:     if(Valor == 2){
   780  002C  3002               	movlw	2
   781  002D  0674               	xorwf	initOsc@Valor,w
   782  002E  1D03               	btfss	3,2
   783  002F  2831               	goto	u31
   784  0030  2832               	goto	u30
   785  0031                     u31:
   786  0031  2837               	goto	l716
   787  0032                     u30:
   788  0032                     l714:
   789                           
   790                           ;Oscilador.c: 25:         OSCCONbits.IRCF0 = 1;
   791  0032  1683               	bsf	3,5	;RP0=1, select bank1
   792  0033  1303               	bcf	3,6	;RP1=0, select bank1
   793  0034  160F               	bsf	15,4	;volatile
   794                           
   795                           ;Oscilador.c: 26:         OSCCONbits.IRCF1 = 0;
   796  0035  128F               	bcf	15,5	;volatile
   797                           
   798                           ;Oscilador.c: 27:         OSCCONbits.IRCF2 = 1;
   799  0036  170F               	bsf	15,6	;volatile
   800  0037                     l716:
   801                           
   802                           ;Oscilador.c: 29:     if(Valor == 1){
   803  0037  0374               	decf	initOsc@Valor,w
   804  0038  1D03               	btfss	3,2
   805  0039  283B               	goto	u41
   806  003A  283C               	goto	u40
   807  003B                     u41:
   808  003B  2841               	goto	l81
   809  003C                     u40:
   810  003C                     l718:
   811                           
   812                           ;Oscilador.c: 30:         OSCCONbits.IRCF0 = 0;
   813  003C  1683               	bsf	3,5	;RP0=1, select bank1
   814  003D  1303               	bcf	3,6	;RP1=0, select bank1
   815  003E  120F               	bcf	15,4	;volatile
   816                           
   817                           ;Oscilador.c: 31:         OSCCONbits.IRCF1 = 0;
   818  003F  128F               	bcf	15,5	;volatile
   819                           
   820                           ;Oscilador.c: 32:         OSCCONbits.IRCF2 = 1;
   821  0040  170F               	bsf	15,6	;volatile
   822  0041                     l81:	
   823                           ;Oscilador.c: 33:     }
   824                           
   825                           
   826                           ;Oscilador.c: 36:     OSCCONbits.SCS = 1;
   827  0041  1683               	bsf	3,5	;RP0=1, select bank1
   828  0042  1303               	bcf	3,6	;RP1=0, select bank1
   829  0043  140F               	bsf	15,0	;volatile
   830  0044                     l82:
   831  0044  0008               	return
   832  0045                     __end_of_initOsc:
   833                           
   834                           	psect	text3
   835  0045                     __ptext3:	
   836 ;; *************** function _InitMSSP *****************
   837 ;; Defined at:
   838 ;;		line 10 in file "SPI.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  Modo            1    wreg     enum E1264
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  Modo            1    4[COMMON] enum E1264
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   852 ;;      Params:         0       0       0       0       0
   853 ;;      Locals:         1       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0
   855 ;;      Totals:         1       0       0       0       0
   856 ;;Total ram usage:        1 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; Hardware stack levels required when called: 2
   859 ;; This function calls:
   860 ;;		Nothing
   861 ;; This function is called by:
   862 ;;		_setup
   863 ;; This function uses a non-reentrant model
   864 ;;
   865                           
   866                           
   867                           ;psect for function _InitMSSP
   868  0045                     _InitMSSP:
   869                           
   870                           ;incstack = 0
   871                           ; Regs used in _InitMSSP: [wreg+status,2+status,0]
   872                           ;InitMSSP@Modo stored from wreg
   873  0045  00F4               	movwf	InitMSSP@Modo
   874  0046                     l720:
   875                           
   876                           ;SPI.c: 12:     SSPSTAT = 0b00000000;
   877  0046  1683               	bsf	3,5	;RP0=1, select bank1
   878  0047  1303               	bcf	3,6	;RP1=0, select bank1
   879  0048  0194               	clrf	20	;volatile
   880                           
   881                           ;SPI.c: 13:     SSPCON = 0b00000000;
   882  0049  1283               	bcf	3,5	;RP0=0, select bank0
   883  004A  1303               	bcf	3,6	;RP1=0, select bank0
   884  004B  0194               	clrf	20	;volatile
   885  004C                     l722:
   886                           
   887                           ;SPI.c: 18:     SSPCONbits.SSPEN = 0;
   888  004C  1294               	bcf	20,5	;volatile
   889  004D                     l724:
   890                           
   891                           ;SPI.c: 20:     SSPCONbits.SSPEN = 1;
   892  004D  1694               	bsf	20,5	;volatile
   893  004E                     l726:
   894                           
   895                           ;SPI.c: 23:     TRISCbits.TRISC5 = 0;
   896  004E  1683               	bsf	3,5	;RP0=1, select bank1
   897  004F  1303               	bcf	3,6	;RP1=0, select bank1
   898  0050  1287               	bcf	7,5	;volatile
   899  0051                     l728:
   900                           
   901                           ;SPI.c: 24:     TRISCbits.TRISC4 = 1;
   902  0051  1607               	bsf	7,4	;volatile
   903  0052                     l730:
   904                           
   905                           ;SPI.c: 25:     if (Modo < 0b00000110){
   906  0052  3006               	movlw	6
   907  0053  0274               	subwf	InitMSSP@Modo,w
   908  0054  1803               	skipnc
   909  0055  2857               	goto	u51
   910  0056  2858               	goto	u50
   911  0057                     u51:
   912  0057  2861               	goto	l736
   913  0058                     u50:
   914  0058                     l732:
   915                           
   916                           ;SPI.c: 27:         if (Modo < 0b00000100){
   917  0058  3004               	movlw	4
   918  0059  0274               	subwf	InitMSSP@Modo,w
   919  005A  1803               	skipnc
   920  005B  285D               	goto	u61
   921  005C  285E               	goto	u60
   922  005D                     u61:
   923  005D  2860               	goto	l100
   924  005E                     u60:
   925  005E                     l734:
   926                           
   927                           ;SPI.c: 28:             TRISCbits.TRISC3 = 0;
   928  005E  1187               	bcf	7,3	;volatile
   929                           
   930                           ;SPI.c: 29:         }
   931  005F  2861               	goto	l736
   932  0060                     l100:	
   933                           ;SPI.c: 30:         else {
   934                           
   935                           
   936                           ;SPI.c: 31:             TRISCbits.TRISC3 = 1;
   937  0060  1587               	bsf	7,3	;volatile
   938  0061                     l736:
   939                           
   940                           ;SPI.c: 36:     if (Modo == 0b00000100){ TRISAbits.TRISA5 = 1;}
   941  0061  3004               	movlw	4
   942  0062  0674               	xorwf	InitMSSP@Modo,w
   943  0063  1D03               	btfss	3,2
   944  0064  2866               	goto	u71
   945  0065  2867               	goto	u70
   946  0066                     u71:
   947  0066  2868               	goto	l740
   948  0067                     u70:
   949  0067                     l738:
   950  0067  1685               	bsf	5,5	;volatile
   951  0068                     l740:
   952                           
   953                           ;SPI.c: 40:     SSPCON = SSPCON | Modo;
   954  0068  1283               	bcf	3,5	;RP0=0, select bank0
   955  0069  1303               	bcf	3,6	;RP1=0, select bank0
   956  006A  0814               	movf	20,w	;volatile
   957  006B  0474               	iorwf	InitMSSP@Modo,w	;volatile
   958  006C  0094               	movwf	20	;volatile
   959  006D                     l742:
   960                           
   961                           ;SPI.c: 46:     SSPCONbits.CKP = 0;
   962  006D  1214               	bcf	20,4	;volatile
   963  006E                     l744:
   964                           
   965                           ;SPI.c: 49:     SSPSTATbits.CKE = 1;
   966  006E  1683               	bsf	3,5	;RP0=1, select bank1
   967  006F  1303               	bcf	3,6	;RP1=0, select bank1
   968  0070  1714               	bsf	20,6	;volatile
   969  0071                     l746:
   970                           
   971                           ;SPI.c: 51:     SSPSTATbits.SMP = 0;
   972  0071  1394               	bcf	20,7	;volatile
   973  0072                     l103:
   974  0072  0008               	return
   975  0073                     __end_of_InitMSSP:
   976                           
   977                           	psect	text4
   978  00BD                     __ptext4:	
   979 ;; *************** function _isr *****************
   980 ;; Defined at:
   981 ;;		line 56 in file "ESCLAVO2.c"
   982 ;; Parameters:    Size  Location     Type
   983 ;;		None
   984 ;; Auto vars:     Size  Location     Type
   985 ;;		None
   986 ;; Return value:  Size  Location     Type
   987 ;;                  1    wreg      void 
   988 ;; Registers used:
   989 ;;		wreg, status,2, status,0, pclath, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 0/0
   992 ;;		On exit  : 0/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   995 ;;      Params:         0       0       0       0       0
   996 ;;      Locals:         0       0       0       0       0
   997 ;;      Temps:          3       0       0       0       0
   998 ;;      Totals:         3       0       0       0       0
   999 ;;Total ram usage:        3 bytes
  1000 ;; Hardware stack levels used: 1
  1001 ;; Hardware stack levels required when called: 1
  1002 ;; This function calls:
  1003 ;;		_ReadMSSP
  1004 ;;		_WriteMSSP
  1005 ;; This function is called by:
  1006 ;;		Interrupt level 1
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _isr
  1012  00BD                     _isr:
  1013  00BD                     i1l782:
  1014                           
  1015                           ;ESCLAVO2.c: 60:     if(SSPIF == 1){
  1016  00BD  1283               	bcf	3,5	;RP0=0, select bank0
  1017  00BE  1303               	bcf	3,6	;RP1=0, select bank0
  1018  00BF  1D8C               	btfss	12,3	;volatile
  1019  00C0  28C2               	goto	u9_21
  1020  00C1  28C3               	goto	u9_20
  1021  00C2                     u9_21:
  1022  00C2  28D4               	goto	i1l54
  1023  00C3                     u9_20:
  1024  00C3                     i1l784:
  1025                           
  1026                           ;ESCLAVO2.c: 61:         read1 = ReadMSSP();
  1027  00C3  120A  118A  20DB  120A  118A  	fcall	_ReadMSSP
  1028  00C8  00F1               	movwf	??_isr
  1029  00C9  0871               	movf	??_isr,w
  1030  00CA  00F7               	movwf	_read1
  1031  00CB                     i1l786:
  1032                           
  1033                           ;ESCLAVO2.c: 62:         WriteMSSP(PORT);
  1034  00CB  0876               	movf	_PORT,w
  1035  00CC  120A  118A  20E5  120A  118A  	fcall	_WriteMSSP
  1036  00D1                     i1l788:
  1037                           
  1038                           ;ESCLAVO2.c: 63:         SSPIF = 0;
  1039  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  1040  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  1041  00D3  118C               	bcf	12,3	;volatile
  1042  00D4                     i1l54:
  1043  00D4  0873               	movf	??_isr+2,w
  1044  00D5  008A               	movwf	10
  1045  00D6  0E72               	swapf	??_isr+1,w
  1046  00D7  0083               	movwf	3
  1047  00D8  0EFE               	swapf	btemp,f
  1048  00D9  0E7E               	swapf	btemp,w
  1049  00DA  0009               	retfie
  1050  00DB                     __end_of_isr:
  1051                           
  1052                           	psect	intentry
  1053  0004                     __pintentry:	
  1054                           ;incstack = 0
  1055                           ; Regs used in _isr: [wreg+status,2+status,0+pclath+cstack]
  1056                           
  1057  0004                     interrupt_function:
  1058  007E                     saved_w	set	btemp
  1059  0004  00FE               	movwf	btemp
  1060  0005  0E03               	swapf	3,w
  1061  0006  00F2               	movwf	??_isr+1
  1062  0007  080A               	movf	10,w
  1063  0008  00F3               	movwf	??_isr+2
  1064  0009  120A  118A  28BD   	ljmp	_isr
  1065                           
  1066                           	psect	text5
  1067  00E5                     __ptext5:	
  1068 ;; *************** function _WriteMSSP *****************
  1069 ;; Defined at:
  1070 ;;		line 55 in file "SPI.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;  Data            1    wreg     unsigned char 
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;  Data            1    0[COMMON] unsigned char 
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1084 ;;      Params:         0       0       0       0       0
  1085 ;;      Locals:         1       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0
  1087 ;;      Totals:         1       0       0       0       0
  1088 ;;Total ram usage:        1 bytes
  1089 ;; Hardware stack levels used: 1
  1090 ;; This function calls:
  1091 ;;		Nothing
  1092 ;; This function is called by:
  1093 ;;		_isr
  1094 ;; This function uses a non-reentrant model
  1095 ;;
  1096                           
  1097                           
  1098                           ;psect for function _WriteMSSP
  1099  00E5                     _WriteMSSP:
  1100                           
  1101                           ;incstack = 0
  1102                           ; Regs used in _WriteMSSP: [wreg]
  1103                           ;WriteMSSP@Data stored from wreg
  1104  00E5  00F0               	movwf	WriteMSSP@Data
  1105  00E6                     i1l754:
  1106                           
  1107                           ;SPI.c: 59:     SSPBUF = Data;
  1108  00E6  0870               	movf	WriteMSSP@Data,w
  1109  00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1110  00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1111  00E9  0093               	movwf	19	;volatile
  1112  00EA                     i1l106:
  1113  00EA  0008               	return
  1114  00EB                     __end_of_WriteMSSP:
  1115                           
  1116                           	psect	text6
  1117  00DB                     __ptext6:	
  1118 ;; *************** function _ReadMSSP *****************
  1119 ;; Defined at:
  1120 ;;		line 63 in file "SPI.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;                  1    wreg      unsigned char 
  1127 ;; Registers used:
  1128 ;;		wreg
  1129 ;; Tracked objects:
  1130 ;;		On entry : 0/0
  1131 ;;		On exit  : 0/0
  1132 ;;		Unchanged: 0/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1134 ;;      Params:         0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0
  1137 ;;      Totals:         0       0       0       0       0
  1138 ;;Total ram usage:        0 bytes
  1139 ;; Hardware stack levels used: 1
  1140 ;; This function calls:
  1141 ;;		Nothing
  1142 ;; This function is called by:
  1143 ;;		_isr
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function _ReadMSSP
  1149  00DB                     _ReadMSSP:
  1150  00DB                     i1l748:	
  1151                           ;incstack = 0
  1152                           ; Regs used in _ReadMSSP: [wreg]
  1153                           
  1154  00DB                     i1l109:	
  1155                           ;SPI.c: 64:     while(SSPSTATbits.BF == 0){}
  1156                           
  1157  00DB  1683               	bsf	3,5	;RP0=1, select bank1
  1158  00DC  1303               	bcf	3,6	;RP1=0, select bank1
  1159  00DD  1C14               	btfss	20,0	;volatile
  1160  00DE  28E0               	goto	u8_21
  1161  00DF  28E1               	goto	u8_20
  1162  00E0                     u8_21:
  1163  00E0  28DB               	goto	i1l109
  1164  00E1                     u8_20:
  1165  00E1                     i1l750:
  1166                           
  1167                           ;SPI.c: 65:     return(SSPBUF);
  1168  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1169  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1170  00E3  0813               	movf	19,w	;volatile
  1171  00E4                     i1l112:
  1172  00E4  0008               	return
  1173  00E5                     __end_of_ReadMSSP:
  1174  007E                     btemp	set	126	;btemp
  1175  007E                     wtemp0	set	126
  1176                           
  1177                           	psect	config
  1178                           
  1179                           ;Config register CONFIG1 @ 0x2007
  1180                           ;	Oscillator Selection bits
  1181                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1182                           ;	Watchdog Timer Enable bit
  1183                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1184                           ;	Power-up Timer Enable bit
  1185                           ;	PWRTE = OFF, PWRT disabled
  1186                           ;	RE3/MCLR pin function select bit
  1187                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1188                           ;	Code Protection bit
  1189                           ;	CP = OFF, Program memory code protection is disabled
  1190                           ;	Data Code Protection bit
  1191                           ;	CPD = OFF, Data memory code protection is disabled
  1192                           ;	Brown Out Reset Selection bits
  1193                           ;	BOREN = OFF, BOR disabled
  1194                           ;	Internal External Switchover bit
  1195                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1196                           ;	Fail-Safe Clock Monitor Enabled bit
  1197                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1198                           ;	Low Voltage Programming Enable bit
  1199                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1200                           ;	In-Circuit Debugger Mode bit
  1201                           ;	DEBUG = 0x1, unprogrammed default
  1202  2007                     	org	8199
  1203  2007  20D4               	dw	8404
  1204                           
  1205                           ;Config register CONFIG2 @ 0x2008
  1206                           ;	Brown-out Reset Selection bit
  1207                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1208                           ;	Flash Program Memory Self Write Enable bits
  1209                           ;	WRT = OFF, Write protection off
  1210  2008                     	org	8200
  1211  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         2
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       8
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _setup->_InitMSSP
    _setup->_initOsc

Critical Paths under _isr in COMMON

    _isr->_WriteMSSP

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     120
                                              5 COMMON     1     1      0
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     120
                           _InitMSSP
                            _initOsc
 ---------------------------------------------------------------------------------
 (2) _initOsc                                              1     1      0      60
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _InitMSSP                                             1     1      0      60
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                  3     3      0      15
                                              1 COMMON     3     3      0
                           _ReadMSSP
                          _WriteMSSP
 ---------------------------------------------------------------------------------
 (4) _WriteMSSP                                            1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _ReadMSSP                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
     _InitMSSP
     _initOsc

 _isr (ROOT)
   _ReadMSSP
   _WriteMSSP

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       8       1       57.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       8       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       8      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Fri Feb 18 11:05:21 2022

            _SSPSTATbits 0094                       l61 00A5                       l81 0041  
                     l73 0098                       l65 00AF                       l82 0044  
                     u10 001C                       u11 001B                       u20 0027  
                     u21 0026                       u30 0032                       u31 0031  
                     u40 003C                       u41 003B                       u50 0058  
                     u51 0057                       u60 005E                       u61 005D  
                     u70 0067                       u71 0066                      l100 0060  
                    l103 0072                      l710 0027                      l720 0046  
                    l712 002C                      l704 0016                      l800 00AB  
                    l730 0052                      l722 004C                      l714 0032  
                    l706 001C                      l740 0068                      l732 0058  
                    l724 004D                      l716 0037                      l708 0021  
                    l804 00B3                      l742 006D                      l734 005E  
                    l726 004E                      l718 003C                      l806 00B7  
                    l744 006E                      l736 0061                      l728 0051  
                    l760 007D                      l746 0071                      l738 0067  
                    l770 0084                      l762 007E                      l780 0095  
                    l772 008A                      l764 0081                      l756 0073  
                    l774 0090                      l766 0082                      l758 007B  
                    l790 0099                      l776 0091                      l768 0083  
                    l792 009E                      l778 0092                      l794 009F  
                    l798 00A9                      _RD2 0042                      _RD3 0043  
                    u100 00A5                      u101 00A4                      u110 00A9  
                    u111 00A8                      u120 00AF                      u121 00AE  
                    u130 00B3                      u131 00B2                      _isr 00BD  
                   ?_isr 0070                     i1l54 00D4                     _PORT 0076  
                   u8_20 00E1                     u8_21 00E0                     u9_20 00C3  
                   u9_21 00C2                     _main 0099                     btemp 007E  
                   start 000C                    ??_isr 0071                    ?_main 0070  
                  _ANSEL 0188                    i1l112 00E4                    i1l106 00EA  
                  i1l109 00DB                    i1l750 00E1                    i1l754 00E6  
                  i1l748 00DB                    i1l782 00BD                    i1l784 00C3  
                  i1l786 00CB                    i1l788 00D1                    _PORTA 0005  
                  _PORTB 0006                    _PORTD 0008                    _PORTE 0009  
                  _TRISA 0085                    _TRISB 0086                    _TRISD 0088  
                  _TRISE 0089                    _SSPIF 0063             InitMSSP@Modo 0074  
        __end_of_initOsc 0045                    _read1 0077                    _setup 0073  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 000F             __end_of_main 00BD         __end_of_InitMSSP 0073  
       __end_of_ReadMSSP 00E5                   ??_main 0075                   ?_setup 0070  
                 _ANSELH 0189                   _SSPCON 0014                   _SSPBUF 0013  
              ??_initOsc 0074                   saved_w 007E  __end_of__initialization 0011  
     __size_of_WriteMSSP 0006           __pcstackCOMMON 0070            __end_of_setup 0099  
                ??_setup 0075                ?_InitMSSP 0070                ?_ReadMSSP 0070  
             __pmaintext 0099               __pintentry 0004        __end_of_WriteMSSP 00EB  
           initOsc@Valor 0074                  _SSPSTAT 0094               ??_InitMSSP 0074  
             ??_ReadMSSP 0070                  __ptext1 0073                  __ptext2 0015  
                __ptext3 0045                  __ptext4 00BD                  __ptext5 00E5  
                __ptext6 00DB                  _initOsc 0015             __size_of_isr 001E  
   end_of_initialization 0011                _PORTDbits 0008                _TRISAbits 0085  
              _TRISCbits 0087            WriteMSSP@Data 0070      start_initialization 000F  
            __end_of_isr 00DB        __size_of_InitMSSP 002E        __size_of_ReadMSSP 000A  
            __pbssCOMMON 0076                ___latbits 0002                _WriteMSSP 00E5  
               ?_initOsc 0070               ?_WriteMSSP 0070           __size_of_setup 0026  
      interrupt_function 0004                 _PIE1bits 008C                 _PIR1bits 000C  
               _InitMSSP 0045                 _ReadMSSP 00DB         __size_of_initOsc 0030  
            ??_WriteMSSP 0070            __size_of_main 0024               _INTCONbits 000B  
               intlevel1 0000               _OSCCONbits 008F               _SSPCONbits 0014  
